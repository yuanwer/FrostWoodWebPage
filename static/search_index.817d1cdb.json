[{"id":0,"title":"浏览器的作用","content":"#\n\n网页的组成部分是 HTML+CSS+JavaScript，浏览器通过解析和执行这些代码，将画面渲染到网页上，才有了好看的网页。\n\n浏览器的组成部分有很多，比如 UI 界面，用户的登录，书签管理和同步···，但最核心的是渲染引擎。\n\n\n浏览器的渲染引擎#\n\n浏览器渲染引擎（Rendering Engine），通常称为“浏览器内核”，它的主要作用就是解析网页语法，渲染网页。\n\n常见的浏览器有很多，比如 QQ 浏览器，百度浏览器，360 浏览器，搜狗浏览器，Chrome 浏览器，Safari 浏览器，Edge 浏览器等。\n\n\n不同的浏览器内核#\n\n常见的浏览器内核，此处只是简单的列举，各个浏览器内核的细节和历史，可以参考维基百科。\n\n 1. Trident（三叉戟）：IE 浏览器、360 安全浏览器、百度浏览器···\n 2. Gecko（壁虎）：Mozilla Firefox 浏览器\n 3. Presto（急板）：Opera 浏览器\n 4. WebKit：Safari 浏览器、360 极速浏览器、移动端浏览器（Android、iOS）\n 5. Blink（眨眼）：Google Chrome 浏览器、Edge 浏览器（新版本）\n\n不同的浏览器内核，有不同的解析和渲染规则，所以就会出现同一套网页代码，在不同内核的浏览器当中，显示出来的效果不一样。\n\n所以在实际开发时，往往都需要做不同程序的浏览器适配的工作， 当然，现代的前端开发，已经有了不少的工具，可以自动的帮助我们实现浏览器的适配， 比如 PostCSS\n的 autoprefixer 插件，就可以自动的帮助我们添加不同浏览器的 css 前缀。\n所以，现代前端开发的工作重心，更加的偏向业务功能和用户体验，而不再需要花费大量的时间去适配浏览器。","routePath":"/FrostWoodWebPage/front-end/browser/1.浏览器的作用","lang":"","toc":[{"text":"浏览器的渲染引擎","id":"浏览器的渲染引擎","depth":2,"charIndex":119},{"text":"不同的浏览器内核","id":"不同的浏览器内核","depth":2,"charIndex":265}],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"URL","content":"#\n\nhttps://github.com/umicro/uView2.0/blob/master/uni_modules/uview-ui/libs/functio\nn/index.js\n\n\n对象转URL参数#\n\n\nuview-ui queryParams#\n\n","routePath":"/FrostWoodWebPage/front-end/code-snippet/url","lang":"","toc":[{"text":"对象转URL参数","id":"对象转url参数","depth":2,"charIndex":96},{"text":"uview-ui queryParams","id":"uview-ui-queryparams","depth":3,"charIndex":108}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"剪贴板","content":"#\n\n\n复制文本到剪贴板#\n\n\nNavigator.clipboard.writeText#\n\n\n\n\nDocument.execCommand('copy')#\n\n\n\nWARNING\n\n此方法并非在任何地方都有效，而只能作为用户操作的结果（例如在click事件侦听器内）。这是一项安全措施，旨在防止恶意网站未经用户同意将敏感数据复制到贴板。\n\n\n兼容性方案#\n\n结合前面两种方法，复用已有代码：\n\n\n\n这个方案的特点：\n\n 1. 复用了前面定义的两种复制方法\n\n 2. 优先使用现代的 Clipboard API\n\n 3. 失败时自动降级使用 execCommand 方法\n\n 4. 统一使用 Promise，失败时会抛出具体错误信息","routePath":"/FrostWoodWebPage/front-end/code-snippet/剪贴板","lang":"","toc":[{"text":"复制文本到剪贴板","id":"复制文本到剪贴板","depth":2,"charIndex":3},{"text":"Navigator.clipboard.writeText","id":"navigatorclipboardwritetext","depth":3,"charIndex":15},{"text":"Document.execCommand('copy')","id":"documentexeccommandcopy","depth":3,"charIndex":50},{"text":"兼容性方案","id":"兼容性方案","depth":2,"charIndex":172}],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"对象操作","content":"#\n\n\n原生js structuredClone#\n\nMDN\n\n\n\n\nuview-ui 深度克隆#\n\n以下代码来自 uview-ui 2.0 组件库源码，原始代码。\n\n\n\n\nuview-ui 对象深度合并#\n\n以下代码来自 uview-ui 2.0 组件库源码，原始代码。\n\n深度合并需要搭配深度克隆使用。\n\n","routePath":"/FrostWoodWebPage/front-end/code-snippet/对象操作","lang":"","toc":[{"text":"原生js structuredClone","id":"原生js-structuredclone","depth":2,"charIndex":3},{"text":"uview-ui 深度克隆","id":"uview-ui-深度克隆","depth":2,"charIndex":34},{"text":"uview-ui 对象深度合并","id":"uview-ui-对象深度合并","depth":2,"charIndex":86}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"数组","content":"#\n\nhttps://github.com/umicro/uView2.0/blob/master/uni_modules/uview-ui/libs/functio\nn/index.js\n\n\n数组乱序#\n\n\nuview-ui randomArray#\n\n","routePath":"/FrostWoodWebPage/front-end/code-snippet/数组","lang":"","toc":[{"text":"数组乱序","id":"数组乱序","depth":2,"charIndex":96},{"text":"uview-ui randomArray","id":"uview-ui-randomarray","depth":3,"charIndex":104}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"时间和日期","content":"#\n\nhttps://github.com/umicro/uView2.0/blob/master/uni_modules/uview-ui/libs/functio\nn/index.js\n\n\n时间格式化#\n\n\nuview-ui timeFormat#\n\n\n\n\n多久以前#\n\n\nuview-ui timeFrom#\n\n此函数依赖 uview-ui 的 timeFormat 函数。\n\n","routePath":"/FrostWoodWebPage/front-end/code-snippet/时间和日期","lang":"","toc":[{"text":"时间格式化","id":"时间格式化","depth":2,"charIndex":96},{"text":"uview-ui timeFormat","id":"uview-ui-timeformat","depth":3,"charIndex":105},{"text":"多久以前","id":"多久以前","depth":2,"charIndex":130},{"text":"uview-ui timeFrom","id":"uview-ui-timefrom","depth":3,"charIndex":138}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"节流","content":"#\n\n概念：节流函数的作用是限制函数的执行频率，在一定时间内只能执行一次。\n\n使用场景：\n\n * 窗口滚动事件\n * 鼠标移动事件\n * 窗口大小调整事件\n\n\n时间戳节流#\n\n计算当前时间与上次执行时间的差值，如果差值大于时间限制，则执行函数。\n\n\n\n\n定时器节流#\n\n使用定时器，在规定时间内，如果再次执行函数，则清除定时器，重新计时。\n\n\n\n\nuview-ui 节流#\n\n以下代码来自 uview-ui 2.0 组件库源码，原始代码。\n\n特点是，如果一个页面引入了此函数，并且A、B两个函数都使用了此节流函数，那么A、B函数都会使用同一个timer。这意味着，如果A先执行，B后执行，并且间隔时间小\n于wait，那么B函数不会执行。\n\n","routePath":"/FrostWoodWebPage/front-end/code-snippet/节流","lang":"","toc":[{"text":"时间戳节流","id":"时间戳节流","depth":2,"charIndex":79},{"text":"定时器节流","id":"定时器节流","depth":2,"charIndex":126},{"text":"uview-ui 节流","id":"uview-ui-节流","depth":2,"charIndex":173}],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"规则校验","content":"#\n\n代码来自uview-ui\n\n\n验证电子邮箱格式#\n\n\n\n\n验证手机格式#\n\n\n\n\n验证URL格式#\n\n\n\n\n验证日期格式#\n\n\n\n\n验证ISO类型的日期格式#\n\n\n\n\n验证十进制数字#\n\n\n\n\n验证字符串#\n\n\n\n\n验证整数#\n\n\n\n\n验证身份证号码#\n\n\n\n\n是否车牌号#\n\n\n\n\n金额,只允许2位小数#\n\n\n\n\n中文#\n\n\n\n\n只能输入字母#\n\n\n\n\n只能是字母或者数字#\n\n\n\n\n验证是否包含某个值#\n\n\n\n\n验证一个值范围[min, max]#\n\n\n\n\n验证一个长度范围[min, max]#\n\n\n\n\n是否固定电话#\n\n\n\n\n判断是否为空#\n\n\n\n\n是否json字符串#\n\n\n\n\n是否数组#\n\n\n\n\n是否对象#\n\n\n\n\n是否短信验证码#\n\n\n\n\n是否函数方法#\n\n\n\n\n是否promise对象#\n\n\n\n\n是否图片格式#\n\n\n\n\n是否视频格式#\n\n\n\n\n是否为正则对象#\n\n","routePath":"/FrostWoodWebPage/front-end/code-snippet/规则校验","lang":"","toc":[{"text":"验证电子邮箱格式","id":"验证电子邮箱格式","depth":2,"charIndex":17},{"text":"验证手机格式","id":"验证手机格式","depth":2,"charIndex":31},{"text":"验证URL格式","id":"验证url格式","depth":2,"charIndex":43},{"text":"验证日期格式","id":"验证日期格式","depth":2,"charIndex":56},{"text":"验证ISO类型的日期格式","id":"验证iso类型的日期格式","depth":2,"charIndex":68},{"text":"验证十进制数字","id":"验证十进制数字","depth":2,"charIndex":86},{"text":"验证字符串","id":"验证字符串","depth":2,"charIndex":99},{"text":"验证整数","id":"验证整数","depth":2,"charIndex":110},{"text":"验证身份证号码","id":"验证身份证号码","depth":2,"charIndex":120},{"text":"是否车牌号","id":"是否车牌号","depth":2,"charIndex":133},{"text":"金额,只允许2位小数","id":"金额只允许2位小数","depth":2,"charIndex":144},{"text":"中文","id":"中文","depth":2,"charIndex":160},{"text":"只能输入字母","id":"只能输入字母","depth":2,"charIndex":168},{"text":"只能是字母或者数字","id":"只能是字母或者数字","depth":2,"charIndex":180},{"text":"验证是否包含某个值","id":"验证是否包含某个值","depth":2,"charIndex":195},{"text":"验证一个值范围[min, max]","id":"验证一个值范围min-max","depth":2,"charIndex":210},{"text":"验证一个长度范围[min, max]","id":"验证一个长度范围min-max","depth":2,"charIndex":233},{"text":"是否固定电话","id":"是否固定电话","depth":2,"charIndex":257},{"text":"判断是否为空","id":"判断是否为空","depth":2,"charIndex":269},{"text":"是否json字符串","id":"是否json字符串","depth":2,"charIndex":281},{"text":"是否数组","id":"是否数组","depth":2,"charIndex":296},{"text":"是否对象","id":"是否对象","depth":2,"charIndex":306},{"text":"是否短信验证码","id":"是否短信验证码","depth":2,"charIndex":316},{"text":"是否函数方法","id":"是否函数方法","depth":2,"charIndex":329},{"text":"是否promise对象","id":"是否promise对象","depth":2,"charIndex":341},{"text":"是否图片格式","id":"是否图片格式","depth":2,"charIndex":358},{"text":"是否视频格式","id":"是否视频格式","depth":2,"charIndex":370},{"text":"是否为正则对象","id":"是否为正则对象","depth":2,"charIndex":382}],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"计算和金额","content":"#\n\n\n计算多个数的总和#\n\n使用 bignumber.js 库来解决精度问题。\n\n任何的假值都会被转换为 0。\n\n\n\n\n格式化金额#\n\n\n\n\nNumeral.js#\n\nhttp://numeraljs.com/","routePath":"/FrostWoodWebPage/front-end/code-snippet/计算和金额","lang":"","toc":[{"text":"计算多个数的总和","id":"计算多个数的总和","depth":2,"charIndex":3},{"text":"格式化金额","id":"格式化金额","depth":2,"charIndex":60},{"text":"Numeral.js","id":"numeraljs","depth":2,"charIndex":71}],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"防抖","content":"#\n\n概念：无论触发多少次事件，事件处理函数只会在事件触发停止后执行一次。\n\n使用场景：\n\n * 窗口大小调整事件\n * 搜索框输入查询\n * 表单验证\n * 自动保存用户填写的数据\n\n\nuview-ui 防抖函数#\n\n以下代码来自 uview-ui 2.0 组件库源码，原始代码。\n\n","routePath":"/FrostWoodWebPage/front-end/code-snippet/防抖","lang":"","toc":[{"text":"uview-ui 防抖函数","id":"uview-ui-防抖函数","depth":2,"charIndex":93}],"domain":"","frontmatter":{},"version":""},{"id":10,"title":"随机数或标识","content":"#\n\nhttps://github.com/umicro/uView2.0/blob/master/uni_modules/uview-ui/libs/functio\nn/index.js\n\n\n全局唯一标识符#\n\n\nuview-ui guid#\n\n\n\n\n随机数值 random#\n\n","routePath":"/FrostWoodWebPage/front-end/code-snippet/随机数或标识","lang":"","toc":[{"text":"全局唯一标识符","id":"全局唯一标识符","depth":2,"charIndex":96},{"text":"uview-ui guid","id":"uview-ui-guid","depth":3,"charIndex":107},{"text":"随机数值 random","id":"随机数值-random","depth":2,"charIndex":126}],"domain":"","frontmatter":{},"version":""},{"id":11,"title":"颜色","content":"#\n\nhttps://github.com/umicro/uView2.0/blob/master/uni_modules/uview-ui/libs/functio\nn/colorGradient.js\n\n\nRGB 转 Hex#\n\n\n\n\nHex 转 RGB#\n\n\n\n\n求两个颜色之间的渐变值#\n\n依赖于 hexToRgb 函数\n\n\n\n\n十六进制颜色值转换为 RGB 或 RGBA#\n\n依赖于 rgbToHex 函数\n\n","routePath":"/FrostWoodWebPage/front-end/code-snippet/颜色","lang":"","toc":[{"text":"RGB 转 Hex","id":"rgb-转-hex","depth":2,"charIndex":104},{"text":"Hex 转 RGB","id":"hex-转-rgb","depth":2,"charIndex":119},{"text":"求两个颜色之间的渐变值","id":"求两个颜色之间的渐变值","depth":2,"charIndex":134},{"text":"十六进制颜色值转换为 RGB 或 RGBA","id":"十六进制颜色值转换为-rgb-或-rgba","depth":2,"charIndex":168}],"domain":"","frontmatter":{},"version":""},{"id":12,"title":"Git SSH Key 配置笔记","content":"#\n\n\n懂哥专享#\n\n前置：安装 Git，注册 GitHub 或 Gitee 账号\n\n\n\n\n概述#\n\n记录如何配置 Git SSH Key，配置后可以免密码操作 Git 仓库。\n\n\n环境准备#\n\n需要：\n\n * Git（下载地址）\n * 代码托管平台账号（GitHub/Gitee）\n\n\n配置用户信息#\n\n在使用 Git 之前，需要先配置用户名和邮箱：\n\n\n\n这些信息会被用于记录代码提交者的身份。建议使用与代码托管平台相同的用户名和邮箱。\n\n\n创建 SSH Key#\n\n 1. 打开终端\n    \n    * Windows：Git Bash\n    * macOS/Linux：终端\n\n 2. 执行以下命令，之后会提示输入一些配置信息，全部回车即可，直到看到类似下面这样的随机图案表示生成成功：\n\n\n\n\n\n具体图案可能不同，只要看到类似这样的 ASCII 艺术图案就说明生成成功了。\n\n\n添加公钥到代码平台#\n\n 1. 复制公钥：\n\n\n\n会显示类似下面这样的内容（以 ssh-rsa 开头，以你的邮箱结尾）：\n\n\n\n 2. 添加公钥：\n\nGitHub：\n\n 1. GitHub Settings\n 2. New SSH key\n 3. 标题（如：MacBook）\n 4. 粘贴公钥\n 5. Add SSH key\n\nGitee：\n\n 1. Gitee 设置\n 2. 添加公钥\n 3. 填标题\n 4. 粘贴公钥\n 5. 添加\n\n\n测试连接#\n\n\n\n成功提示：Hi xxx! You've successfully authenticated\n\n\n仓库操作#\n\n\n\n\n常见问题#\n\n公钥认证失败\n\n * 检查公钥是否已添加到平台\n * 确认使用 SSH 地址（git@ 开头）而非 HTTPS 地址\n\n\n安全注意#\n\n * 私钥（id_rsa）需保密\n * 设备丢失要删除对应公钥\n * 建议定期更换\n\n\n参考#\n\n * GitHub SSH 文档\n * Gitee SSH 文档","routePath":"/FrostWoodWebPage/front-end/git/创建sshKey","lang":"","toc":[{"text":"懂哥专享","id":"懂哥专享","depth":2,"charIndex":3},{"text":"概述","id":"概述","depth":2,"charIndex":45},{"text":"环境准备","id":"环境准备","depth":2,"charIndex":90},{"text":"配置用户信息","id":"配置用户信息","depth":2,"charIndex":143},{"text":"创建 SSH Key","id":"创建-ssh-key","depth":2,"charIndex":222},{"text":"添加公钥到代码平台","id":"添加公钥到代码平台","depth":2,"charIndex":395},{"text":"测试连接","id":"测试连接","depth":2,"charIndex":615},{"text":"仓库操作","id":"仓库操作","depth":2,"charIndex":673},{"text":"常见问题","id":"常见问题","depth":2,"charIndex":683},{"text":"安全注意","id":"安全注意","depth":2,"charIndex":751},{"text":"参考","id":"参考","depth":2,"charIndex":802}],"domain":"","frontmatter":{},"version":""},{"id":13,"title":"Git 代理配置","content":"#\n\n\n懂哥专享#\n\n\n\n\n代理配置说明#\n\n在某些网络环境中，可能需要配置代理来访问 Git 仓库。代理服务器可以帮助绕过网络限制，提供更快的访问速度。\n\n\n全局代理配置#\n\n全局代理配置会影响所有 Git 仓库：\n\n\n\n\n仓库代理配置#\n\n仓库代理配置仅对当前仓库生效：\n\n\n\n\n取消代理配置#\n\n不需要代理时，可以取消相关配置：\n\n\n\n\n验证代理配置#\n\n可以通过以下命令查看当前的代理设置：\n\n","routePath":"/FrostWoodWebPage/front-end/git/配置代理","lang":"","toc":[{"text":"懂哥专享","id":"懂哥专享","depth":2,"charIndex":3},{"text":"代理配置说明","id":"代理配置说明","depth":2,"charIndex":13},{"text":"全局代理配置","id":"全局代理配置","depth":3,"charIndex":79},{"text":"仓库代理配置","id":"仓库代理配置","depth":3,"charIndex":112},{"text":"取消代理配置","id":"取消代理配置","depth":3,"charIndex":141},{"text":"验证代理配置","id":"验证代理配置","depth":3,"charIndex":171}],"domain":"","frontmatter":{},"version":""},{"id":14,"title":"HTML 语言和基础结构","content":"Hello World","routePath":"/FrostWoodWebPage/front-end/html/HTML语言和基础结构","lang":"","toc":[{"text":"HTML 文件的后缀名","id":"html-文件的后缀名","depth":2,"charIndex":-1},{"text":"HTML 的结构","id":"html-的结构","depth":2,"charIndex":-1},{"text":"元素","id":"元素","depth":2,"charIndex":-1},{"text":"元素的构成","id":"元素的构成","depth":3,"charIndex":-1},{"text":"单标签元素和双标签元素","id":"单标签元素和双标签元素","depth":3,"charIndex":-1},{"text":"元素的属性","id":"元素的属性","depth":3,"charIndex":-1},{"text":"元素属性的分类","id":"元素属性的分类","depth":3,"charIndex":-1},{"text":"元素的嵌套","id":"元素的嵌套","depth":3,"charIndex":-1},{"text":"HTML中的注释","id":"html中的注释","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":15,"title":"常见元素","content":"#\n\n\nhtml#\n\n根元素（也叫顶级元素、根标签），表示一个文档的根，所有的 HTML 代码都包含在这个标签中。\n\n\nlang 属性#\n\n根元素上通常会设置一个 lang 属性（language），用来指定文档的语言，比如 zh-CN 表示中文，en-US 表示英文。\n\n这个属性不是必须的，但是推荐设置，因为它可以：\n\n 1. 帮助语音合成工具，确定发音； 语音合成工具，可以让特殊群体（比如盲人）通过语音来阅读网页内容，设置 lang 属性可以让语音合成工具根据语言来发音。\n 2. 帮助翻译工具，确定翻译语言； 当你想要阅读一个英文网页时，该网页的 lang 属性是\n    en-US，翻译工具就会知道这个网页是英文的，然后将英文翻译为你的语言。\n 3. 帮助搜索引擎，确定搜索范围。 当你在使用搜索引擎搜索时，搜索引擎会根据你搜索的关键词的语种来搜索，比如搜索 你好，搜索的结果会优先显示 lang 属性为\n    zh-CN 的网页。\n\n\nhead#\n\nhead 元素，表示文档的头部，包含当前网页的配置信息：\n\n * 元数据（metadata），也就是描述数据的数据：比如字符编码、标题等\n * 样式表（stylesheet）：比如 CSS 文件\n * 脚本（script）：比如 JavaScript 文件\n\n至少会包含两个配置：\n\n 1. 网页的标题\n\n\n\n 2. 字符编码\n\n\n\n准确的设置网页的字符编码，可以避免浏览器出现乱码，让浏览器可以精准的显示网页文字。\n\n一般会设置为 utf-8，因为它是国际通用的字符编码，可以显示世界上所有的语言。\n\n\nbody#\n\nbody 元素，表示文档的主体，包含网页的正文内容。\n\n用户在浏览器网页中能看见的东西，都是编写到 body 元素中的。\n\n\nh 元素#\n\nh 元素（heading），表示标题，一共有 6 个，从 h1 到 h6，数字越大，表示标题的级别越低。\n\nh 元素是块级元素，会独占一行，上下会自动添加一定的间距。\n\n\n\n\np 元素#\n\np 元素（paragraph），表示段落，包含一段文字。\n\np 元素是块级元素，会独占一行，上下会自动添加一定的间距。\n\n\n\n\nimg 元素#\n\nimg 元素（image），表示图片，用于在网页中插入图片。\n\n两个常用的属性：\n\n\nsrc 属性#\n\nsrc（source）：图片的地址。\n\n * 可以是一个本地的图片地址\n * 也可以是一个网络的图片地址\n * 还可以是 base64 编码的图片\n\n\n\n网络图片的地址，通常是完整的 URL，比如 https://example.com/images/picture.jpg，这是最常用的方式。\n\n本地的图片地址，后续会和代码一起部署到服务器。\n\n本地图片有两种方式：\n\n 1. 绝对路径（几乎不使用）：从电脑根路径开始，一直到图片文件的路径，比如 D:/absolute/path/to/image.jpg。\n 2. 相对路径（常用）：从当前文件所在的路径开始，到图片文件的路径，比如 ./relative/path/to/image.jpg。\n\n相对路径的规则：\n\n * . 表示当前目录，可以省略\n * ../ 表示上一级目录\n * ../../ 表示上上一级目录\n\n在 Web 开发中，不管是什么操作系统，路径分隔符都使用 /。\n\n\nalt 属性#\n\nalt（alternative）：图片的描述。\n\n * 当图片无法显示时（比如资源地址错误或者图片损坏），会显示这段文字。\n * 屏幕阅读器会读取这段文字，来帮助视力障碍者了解图片的内容。\n\n\n\nWARNING\n\nimg 元素，有 width 和 height 属性，可以设置图片的宽度和高度，border 属性可以设置图片的边框。\n但是现代开发已经不推荐使用这些属性了，而是推荐使用 CSS 来设置图片的样式。\n\n\n可替换元素#\n\nimg 是一个典型的可替换元素。可替换元素就像是一个\"占位符\"，其显示的内容是由外部资源或属性决定的，而不是由标签里面的内容决定。\n\n想象你有一个相框（这就是 HTML 元素），可替换元素就像是你可以在相框里放不同的东西：\n\n\n\n * 同样的 标签\n * 但通过改变 src 属性，可以显示不同的图片\n * 这就是\"可替换\"的意思：内容可以被替换\n\n可替换元素与普通元素的区别：\n\n * 普通的 HTML 元素（如\n   \n   、\n   \n   \n   \n   ）：你写什么内容就显示什么内容\n * 可替换元素：显示的内容是由外部资源或属性决定的，而不是由标签里面的内容决定\n\n\nimg 支持的格式#\n\n支持的格式非常多，常见的 jpg、png、gif、svg 都支持，具体的可以参考 MDN 文档。\n\n\na 元素#\n\na 元素（anchor），表示超链接，用于在网页中插入超链接，从当前网页跳转到另一个链接（可能是另一个网页、视频、文件，也可能是当前网页的某个位置）。\n\n\nhref 属性#\n\nhref（hypertext reference）：指定要跳转的链接地址，可以是网络地址，也可以是本地地址。\n\n\n\n也可以是当前网页的某个位置，比如 #id，表示跳转到当前网页的某个 id 为 id 的元素。这叫做锚点链接。\n\n\n\n\ntarget 属性#\n\ntarget：指定超链接的打开方式，常用的有 _self（默认，在当前页面打开）、_blank（在新窗口打开）。\n\n\n\nINFO\n\n现代浏览器上所看见的“新标签页”，实际上是一个新的窗口。\n\n\n全部的元素#\n\n虽然常见的 HTML 元素不多，但是全部的元素是非常多的，具体可以参考 HTML 元素参考手册。\n\n不需要全部记住，只需要记住常用的元素，然后需要的时候再去查手册。","routePath":"/FrostWoodWebPage/front-end/html/常见元素","lang":"","toc":[{"text":"html","id":"html","depth":2,"charIndex":3},{"text":"lang 属性","id":"lang-属性","depth":3,"charIndex":59},{"text":"head","id":"head","depth":2,"charIndex":426},{"text":"body","id":"body","depth":2,"charIndex":686},{"text":"h 元素","id":"h-元素","depth":2,"charIndex":756},{"text":"p 元素","id":"p-元素","depth":2,"charIndex":851},{"text":"img 元素","id":"img-元素","depth":2,"charIndex":922},{"text":"src 属性","id":"src-属性","depth":3,"charIndex":974},{"text":"alt 属性","id":"alt-属性","depth":3,"charIndex":1404},{"text":"可替换元素","id":"可替换元素","depth":3,"charIndex":1622},{"text":"img 支持的格式","id":"img-支持的格式","depth":3,"charIndex":1921},{"text":"a 元素","id":"a-元素","depth":2,"charIndex":1984},{"text":"href 属性","id":"href-属性","depth":3,"charIndex":2069},{"text":"target 属性","id":"target-属性","depth":3,"charIndex":2196},{"text":"全部的元素","id":"全部的元素","depth":2,"charIndex":2305}],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"文档声明","content":"#\n\n在每个 HTML 文件内容的开头部分，总是有一个 ，它叫做文档声明，作用是声明文档的类型。\n\n它会告诉浏览器，这个文件是一个 HTML 文件，HTML 的版本是 HTML5，让浏览器使用 HTML5 的解析规则来解析这个文件。\n\n必须放在 HTML 文件的第一行，否则可能出现兼容性问题，比如同样的代码，在不同的浏览器中，显示效果不一样。\n\n不同的 HTML 版本，文档声明的写法也是不同的：\n\n * HTML5：\n * HTML4.01：\n * XHTML 1.0：","routePath":"/FrostWoodWebPage/front-end/html/文档声明","lang":"","toc":[],"domain":"","frontmatter":{},"version":""},{"id":17,"title":"JS 中的计时是否精确","content":"#\n\n首先回答：JS 中的计时是不精确的。\n\n下面是测试代码：\n\n\n\n打印结果：\n\n\n\nJS 中的计时不精确的原因，可以从以下 5 个方面来分析。\n\n\n硬件限制#\n\nJS\n所有的计时器最终都要在硬件层面执行。普通计算设备（如电脑和手机）的计时系统存在固有误差。目前只有原子钟能实现高精度计时，它利用原子的振动频率来计时。由于消费级电\n子设备不包含原子钟，从硬件层面来说，JS 计时就无法做到绝对精确。\n\n\n浏览器与操作系统的通信#\n\nJS 的 setTimeout、setInterval 这类计时器 API 是由浏览器实现的。浏览器需要调用操作系统提供的计时相关\nAPI，而不同操作系统（Windows、MacOS、Linux 等）的计时 API 实现各不相同，这导致了跨平台计时存在误差。另外，浏览器调用系统 API\n的过程本身也会产生延迟。\n\n\nHTML 规范的限制#\n\n根据 HTML Living Standard 规范（参考HTML Living Standard 对 JS 定时器的规范），当 setTimeout 或\nsetInterval 发生嵌套，且嵌套层级达到或超过 5 层时，时间间隔会被强制设置为至少 4 毫秒。这是一个明确的规范限制。\n\n规范原文及翻译\n 1. Timers can be nested; after five such nested timers, however, the interval\n    is forced to be at least four\n    milliseconds.（计时器可以嵌套；但是，在五个嵌套的计时器之后，时间间隔会被强制设置为至少四毫秒。）\n 2. This API does not guarantee that timers will run exactly on schedule. Delays\n    due to CPU load, other tasks, etc, are to be expected.（这个 API\n    不能保证计时器会按计划运行。由于 CPU 负载、其他任务等原因，延迟是不可避免的。）\n\n关于第一个规定，下面的代码可以验证：\n\n\n\n打印结果：\n\n\n\n通过观察可以发现，当嵌套层级超过 5 层后，从第 6 层开始，每次计时的时间间隔都被强制设置为至少 4 毫秒。\n\n\n事件循环机制#\n\n计时器触发后，相关的回调函数会被放入任务队列。根据 ECMAScript 规范中的事件循环模型，只有当当前执行栈清空后，才会处理任务队列中的任务。示例代码：\n\n\n\nNOTE\n\n根据 WHATWG 规范，现代浏览器中的任务队列系统实际上包含多个专门的队列，它们具有不同的优先级，而不是传统意义上的宏任务和微任务的简单区分。\n\n\n运行环境的影响#\n\n浏览器针对性能和电源管理做了诸多优化。参考MDN\n文档，当标签页处于非活动状态时，计时器会被强制添加一个延迟时间。此外，设备性能不足、系统负载过高等因素都会影响计时器的精确性。\n\n总结来说，由于硬件限制、系统实现差异、Web 标准规范限制以及运行环境的多重因素影响，JS 中实现完全精确的计时是不可能的。\n\n\n安全限制#\n\n你可能了解过 performance.now() 这个 API，它被设计用来提供高精度的时间戳（微秒级，比 Date.now() 更精确）。\n\n但为了防止时间攻击和指纹识别，浏览器厂商对其精度进行了限制。可以参考 Performance.now()：\n\n原文\n\n这个时间戳实际上并不是高精度的。为了降低像Spectre这样的安全威胁，各类浏览器对该类型的值做了不同程度上的四舍五入处理。（Firefox 从 Firefox\n59 开始四舍五入到 2\n毫秒精度）一些浏览器还可能对这个值作稍微的随机化处理。这个值的精度在未来的版本中可能会再次改善；浏览器开发者还在调查这些时间测定攻击和如何更好的缓解这些攻击。\n\n\n总结#\n\nJS 中的计时不精确，主要受硬件限制、浏览器与操作系统的通信、HTML 规范的限制、事件循环机制、运行环境的影响以及安全限制等因素影响。","routePath":"/FrostWoodWebPage/front-end/javascript/JS中的计时是否精确","lang":"","toc":[{"text":"硬件限制","id":"硬件限制","depth":2,"charIndex":75},{"text":"浏览器与操作系统的通信","id":"浏览器与操作系统的通信","depth":2,"charIndex":202},{"text":"HTML 规范的限制","id":"html-规范的限制","depth":2,"charIndex":375},{"text":"事件循环机制","id":"事件循环机制","depth":2,"charIndex":997},{"text":"运行环境的影响","id":"运行环境的影响","depth":2,"charIndex":1169},{"text":"安全限制","id":"安全限制","depth":2,"charIndex":1334},{"text":"总结","id":"总结","depth":2,"charIndex":1648}],"domain":"","frontmatter":{},"version":""},{"id":18,"title":"JS 原型链","content":"#\n\nJavaScript 的原型链是其最具特色的机制之一,是实现对象继承的基础,也是理解 JavaScript 面向对象编程的关键概念。\n\n\n对象的创建#\n\n要理解原型链的全貌，我们需要从一个最基本的问题开始思考：\"对象是从哪里来的？\"\n\n在 JavaScript 中，对象都是通过 new 操作符和构造函数创建出来的。即使是最简单的对象字面量，本质上也是通过构造函数创建的：\n\n\n\n明白了对象的创建方式，我们来深入理解原型链的概念。\n\n\n函数与原型对象#\n\n在 JavaScript 中，每个函数都有一个特殊的\"孪生兄弟\" —— 原型对象（prototype）。当我们通过 new\n操作符使用函数创建实例时，这个实例会自动获得一个特殊的属性 __proto__（隐式原型），它指向创建该实例的函数的原型对象。\n\n让我们通过一个例子来说明：\n\n\n\n这三者之间的关系可以用下面的图来表示：\n\n\n\n这个图展示了函数、原型对象和实例之间的基本关系：函数通过 prototype 属性连接到原型对象，实例通过 proto 属性连接到原型对象。\n\n\n原型链的形成#\n\n那么，Person.prototype 本身又是什么呢？它其实也是一个对象，是通过 new Object() 创建的。因此，它也有自己的\n__proto__，指向 Object.prototype：\n\n\n\n特别需要注意的是，Object.prototype 原型对象，它的 __proto__ 被 js 引擎默认设置为 null。这样做是为了避免无限循环的原型链。\n\n这个 null 就是原型链的顶端。\n\n为什么会导致无限循环\n\n如果 js 引擎没有设置 Object.prototype 的 __proto__ 为 null，那么 Object.prototype 是一个普通对象，也是由\nnew Object 得来的，那么 Object.prototype 对象的 __proto__ 属性又会指向 Object.prototype 对象自身。\n\n这样就会形成一个无限的循环链，js 引擎在原型链上查找属性时，就会陷入死循环。\n\n\n函数的本质#\n\n在 JavaScript 中，函数本质上也是对象，是一种可调用的特殊对象。所有的函数，包括我们常用的 Object、Array 等内置函数，都是通过 new\nFunction() 创建的：\n\n\n\n这就解释了为什么函数对象（比如 Object 函数）的 __proto__ 会指向 Function.prototype：\n\n\n\n\nFunction 函数的特殊性#\n\nFunction 函数是 JavaScript 引擎启动时就创建的特殊对象，它是所有函数的根源。作为一个特例，它的 __proto__ 指向自己的原型对象\nFunction.prototype：\n\n\n\n而 Function.prototype 作为一个普通对象，是由 new Object() 创建的，所以它的 __proto__ 指向\nObject.prototype，形成了完整的原型链闭环。\n\n\n原型链的实际应用#\n\n让我们看一个实际的例子，展示原型链在开发中的应用：\n\n\n\n\n完整的原型链图谱#\n\n下图展示了 JavaScript 中完整的原型链关系：\n\n\n\n通过这个关系图，我们可以清晰地看到所有对象、函数以及它们的原型之间的联系，这就是 JavaScript 原型链的全貌。","routePath":"/FrostWoodWebPage/front-end/javascript/js原型链","lang":"","toc":[{"text":"对象的创建","id":"对象的创建","depth":2,"charIndex":71},{"text":"函数与原型对象","id":"函数与原型对象","depth":2,"charIndex":220},{"text":"原型链的形成","id":"原型链的形成","depth":2,"charIndex":470},{"text":"函数的本质","id":"函数的本质","depth":2,"charIndex":897},{"text":"Function 函数的特殊性","id":"function-函数的特殊性","depth":2,"charIndex":1069},{"text":"原型链的实际应用","id":"原型链的实际应用","depth":2,"charIndex":1288},{"text":"完整的原型链图谱","id":"完整的原型链图谱","depth":2,"charIndex":1329}],"domain":"","frontmatter":{},"version":""},{"id":19,"title":"NPM 换源与代理设置","content":"#\n\n\n懂哥专享#\n\n\n\n\n更换 NPM 源#\n\n\n1. 直接修改源#\n\n查看当前源：\n\n\n\n设置为淘宝源：\n\n\n\n\n2. 使用 nrm 管理源#\n\nnrm 是一个 NPM 源管理工具，可以快速切换不同的源。\n\n安装 nrm：\n\n\n\n查看可用源列表：\n\n\n\n其中带 * 号的表示当前正在使用的源。\n\n切换到淘宝源：\n\n\n\n\n设置代理#\n\n在一些特殊网络环境下，可能需要设置代理才能正常使用 npm。\n\n\nHTTP 代理设置#\n\n\n\n\n取消代理设置#\n\n\n\n\n常用源地址#\n\n源名称      地址\nnpm 官方   https://registry.npmjs.org/\n淘宝       https://registry.npmmirror.com\n\n\n注意事项#\n\n 1. 使用淘宝源可能会遇到部分包同步延迟\n 2. 建议使用 nrm 管理源，便于切换","routePath":"/FrostWoodWebPage/front-end/npm/换源和代理","lang":"","toc":[{"text":"懂哥专享","id":"懂哥专享","depth":2,"charIndex":3},{"text":"更换 NPM 源","id":"更换-npm-源","depth":2,"charIndex":13},{"text":"1. 直接修改源","id":"1-直接修改源","depth":3,"charIndex":25},{"text":"2. 使用 nrm 管理源","id":"2-使用-nrm-管理源","depth":3,"charIndex":58},{"text":"设置代理","id":"设置代理","depth":2,"charIndex":161},{"text":"HTTP 代理设置","id":"http-代理设置","depth":3,"charIndex":201},{"text":"取消代理设置","id":"取消代理设置","depth":3,"charIndex":216},{"text":"常用源地址","id":"常用源地址","depth":2,"charIndex":228},{"text":"注意事项","id":"注意事项","depth":2,"charIndex":327}],"domain":"","frontmatter":{},"version":""},{"id":20,"title":"Windows 下使用 NVM 管理 Node.js 版本","content":"#\n\nNVM (Node Version Manager) for Windows 是一个用于管理多个 Node.js 版本的工具。本文将指导你如何在 Windows\n系统中使用 NVM。\n\n\n懂哥专享#\n\n\n\n\n安装步骤#\n\n 1. 如果已安装 Node.js，请先卸载它\n 2. 访问 nvm-windows 下载页面\n 3. 下载最新版本的 nvm-setup.exe\n 4. 运行安装程序，全程使用默认设置即可\n\n\n常用命令#\n\n\n\n\n使用建议#\n\n 1. 建议安装 LTS（长期支持）版本作为默认版本\n 2. 可以同时安装多个版本，根据项目需要切换\n 3. 使用 nvm use 切换版本后，记得检查版本是否切换成功\n\n\n常见问题#\n\n 1. 如果遇到 nvm 命令未找到，请确保已经重启命令提示符或 PowerShell\n 2. 如果下载速度慢，可以设置淘宝镜像：\n    \n    ","routePath":"/FrostWoodWebPage/front-end/npm/版本管理","lang":"","toc":[{"text":"懂哥专享","id":"懂哥专享","depth":2,"charIndex":96},{"text":"安装步骤","id":"安装步骤","depth":2,"charIndex":106},{"text":"常用命令","id":"常用命令","depth":2,"charIndex":211},{"text":"使用建议","id":"使用建议","depth":2,"charIndex":221},{"text":"常见问题","id":"常见问题","depth":2,"charIndex":315}],"domain":"","frontmatter":{},"version":""}]