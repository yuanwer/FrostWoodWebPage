"use strict";(self.webpackChunkFrostWood=self.webpackChunkFrostWood||[]).push([["5743"],{5362:function(n,e,r){r.r(e),r.d(e,{default:function(){return i}});var o=r(5893),s=r(65);function t(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",pre:"pre",code:"code"},(0,s.ah)(),n.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(e.h1,{id:"颜色",children:[(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#颜色",children:"#"}),"颜色"]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.a,{href:"https://github.com/umicro/uView2.0/blob/master/uni_modules/uview-ui/libs/function/colorGradient.js",rel:"noopener noreferrer",target:"_blank",children:"https://github.com/umicro/uView2.0/blob/master/uni_modules/uview-ui/libs/function/colorGradient.js"})}),"\n",(0,o.jsxs)(e.h2,{id:"rgb-转-hex",children:[(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#rgb-转-hex",children:"#"}),"RGB 转 Hex"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",meta:"",children:"function rgbToHex(rgb) {\n    const _this = rgb\n    const reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/\n    if (/^(rgb|RGB)/.test(_this)) {\n        const aColor = _this.replace(/(?:\\(|\\)|rgb|RGB)*/g, '').split(',')\n        let strHex = '#'\n        for (let i = 0; i < aColor.length; i++) {\n            let hex = Number(aColor[i]).toString(16)\n            hex = String(hex).length == 1 ? `${0}${hex}` : hex // 保证每个rgb的值为2位\n            if (hex === '0') {\n                hex += hex\n            }\n            strHex += hex\n        }\n        if (strHex.length !== 7) {\n            strHex = _this\n        }\n        return strHex\n    } if (reg.test(_this)) {\n        const aNum = _this.replace(/#/, '').split('')\n        if (aNum.length === 6) {\n            return _this\n        } if (aNum.length === 3) {\n            let numHex = '#'\n            for (let i = 0; i < aNum.length; i += 1) {\n                numHex += (aNum[i] + aNum[i])\n            }\n            return numHex\n        }\n    } else {\n        return _this\n    }\n}\n"})}),"\n",(0,o.jsxs)(e.h2,{id:"hex-转-rgb",children:[(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#hex-转-rgb",children:"#"}),"Hex 转 RGB"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",meta:"",children:"function hexToRgb(sColor, str = true) {\n    const reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/\n    sColor = String(sColor).toLowerCase()\n    if (sColor && reg.test(sColor)) {\n        if (sColor.length === 4) {\n            let sColorNew = '#'\n            for (let i = 1; i < 4; i += 1) {\n                sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1))\n            }\n            sColor = sColorNew\n        }\n        // 处理六位的颜色值\n        const sColorChange = []\n        for (let i = 1; i < 7; i += 2) {\n            sColorChange.push(parseInt(`0x${sColor.slice(i, i + 2)}`))\n        }\n        if (!str) {\n            return sColorChange\n        }\n        return `rgb(${sColorChange[0]},${sColorChange[1]},${sColorChange[2]})`\n    } if (/^(rgb|RGB)/.test(sColor)) {\n        const arr = sColor.replace(/(?:\\(|\\)|rgb|RGB)*/g, '').split(',')\n        return arr.map((val) => Number(val))\n    }\n    return sColor\n}\n"})}),"\n",(0,o.jsxs)(e.h2,{id:"求两个颜色之间的渐变值",children:[(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#求两个颜色之间的渐变值",children:"#"}),"求两个颜色之间的渐变值"]}),"\n",(0,o.jsxs)(e.p,{children:["依赖于 ",(0,o.jsx)(e.code,{children:"hexToRgb"})," 函数"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",meta:"",children:"/**\n * 求两个颜色之间的渐变值\n * @param {string} startColor 开始的颜色\n * @param {string} endColor 结束的颜色\n * @param {number} step 颜色等分的份额\n * */\nfunction colorGradient(startColor = 'rgb(0, 0, 0)', endColor = 'rgb(255, 255, 255)', step = 10) {\n    const startRGB = hexToRgb(startColor, false) // 转换为rgb数组模式\n    const startR = startRGB[0]\n    const startG = startRGB[1]\n    const startB = startRGB[2]\n\n    const endRGB = hexToRgb(endColor, false)\n    const endR = endRGB[0]\n    const endG = endRGB[1]\n    const endB = endRGB[2]\n\n    const sR = (endR - startR) / step // 总差值\n    const sG = (endG - startG) / step\n    const sB = (endB - startB) / step\n    const colorArr = []\n    for (let i = 0; i < step; i++) {\n        // 计算每一步的hex值\n        let hex = rgbToHex(`rgb(${Math.round((sR * i + startR))},${Math.round((sG * i + startG))},${Math.round((sB\n			* i + startB))})`)\n        // 确保第一个颜色值为startColor的值\n        if (i === 0) hex = rgbToHex(startColor)\n        // 确保最后一个颜色值为endColor的值\n        if (i === step - 1) hex = rgbToHex(endColor)\n        colorArr.push(hex)\n    }\n    return colorArr\n}\n"})}),"\n",(0,o.jsxs)(e.h2,{id:"十六进制颜色值转换为-rgb-或-rgba",children:[(0,o.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#十六进制颜色值转换为-rgb-或-rgba",children:"#"}),"十六进制颜色值转换为 RGB 或 RGBA"]}),"\n",(0,o.jsxs)(e.p,{children:["依赖于 ",(0,o.jsx)(e.code,{children:"rgbToHex"})," 函数"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-js",meta:"",children:"/**\n* JS颜色十六进制转换为rgb或rgba,返回的格式为 rgba（255，255，255，0.5）字符串\n* sHex为传入的十六进制的色值\n* alpha为rgba的透明度\n*/\nfunction colorToRgba(color, alpha) {\n    color = rgbToHex(color)\n    // 十六进制颜色值的正则表达式\n    const reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/\n    /* 16进制颜色转为RGB格式 */\n    let sColor = String(color).toLowerCase()\n    if (sColor && reg.test(sColor)) {\n        if (sColor.length === 4) {\n            let sColorNew = '#'\n            for (let i = 1; i < 4; i += 1) {\n                sColorNew += sColor.slice(i, i + 1).concat(sColor.slice(i, i + 1))\n            }\n            sColor = sColorNew\n        }\n        // 处理六位的颜色值\n        const sColorChange = []\n        for (let i = 1; i < 7; i += 2) {\n            sColorChange.push(parseInt(`0x${sColor.slice(i, i + 2)}`))\n        }\n        // return sColorChange.join(',')\n        return `rgba(${sColorChange.join(',')},${alpha})`\n    }\n\n    return sColor\n}\n"})})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,o.jsx)(e,Object.assign({},n,{children:(0,o.jsx)(t,n)})):t(n)}let i=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["front-end%2Fcode-snippet%2F%E9%A2%9C%E8%89%B2.mdx"]={toc:[{id:"rgb-转-hex",text:"RGB 转 Hex",depth:2},{id:"hex-转-rgb",text:"Hex 转 RGB",depth:2},{id:"求两个颜色之间的渐变值",text:"求两个颜色之间的渐变值",depth:2},{id:"十六进制颜色值转换为-rgb-或-rgba",text:"十六进制颜色值转换为 RGB 或 RGBA",depth:2}],title:"颜色",frontmatter:{}}}}]);