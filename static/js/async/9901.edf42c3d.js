"use strict";(self.webpackChunkFrostWood=self.webpackChunkFrostWood||[]).push([["9901"],{7686:function(e,t,n){n.r(t),n.d(t,{default:function(){return s}});var i=n(5893),r=n(65);function a(e){let t=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",pre:"pre",code:"code"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.h1,{id:"时间和日期",children:[(0,i.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#时间和日期",children:"#"}),"时间和日期"]}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://github.com/umicro/uView2.0/blob/master/uni_modules/uview-ui/libs/function/index.js",rel:"noopener noreferrer",target:"_blank",children:"https://github.com/umicro/uView2.0/blob/master/uni_modules/uview-ui/libs/function/index.js"})}),"\n",(0,i.jsxs)(t.h2,{id:"时间格式化",children:[(0,i.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#时间格式化",children:"#"}),"时间格式化"]}),"\n",(0,i.jsxs)(t.h3,{id:"uview-ui-timeformat",children:[(0,i.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#uview-ui-timeformat",children:"#"}),"uview-ui timeFormat"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",meta:"",children:"/**\n * @description 格式化时间\n * @param {String|Number} dateTime 需要格式化的时间戳\n * @param {String} fmt 格式化规则 yyyy:mm:dd|yyyy:mm|yyyy年mm月dd日|yyyy年mm月dd日 hh时MM分等,可自定义组合 默认yyyy-mm-dd\n * @returns {string} 返回格式化后的字符串\n */\n function timeFormat(dateTime = null, formatStr = 'yyyy-mm-dd') {\n  let date\n	// 若传入时间为假值，则取当前时间\n  if (!dateTime) {\n    date = new Date()\n  }\n  // 若为unix秒时间戳，则转为毫秒时间戳（逻辑有点奇怪，但不敢改，以保证历史兼容）\n  else if (/^\\d{10}$/.test(dateTime?.toString().trim())) {\n    date = new Date(dateTime * 1000)\n  }\n  // 若用户传入字符串格式时间戳，new Date无法解析，需做兼容\n  else if (typeof dateTime === 'string' && /^\\d+$/.test(dateTime.trim())) {\n    date = new Date(Number(dateTime))\n  }\n	// 处理平台性差异，在Safari/Webkit中，new Date仅支持/作为分割符的字符串时间\n	// 处理 '2022-07-10 01:02:03'，跳过 '2022-07-10T01:02:03'\n	else if (typeof dateTime === 'string' && dateTime.includes('-') && !dateTime.includes('T')) {\n		date = new Date(dateTime.replace(/-/g, '/'))\n	}\n	// 其他都认为符合 RFC 2822 规范\n	else {\n		date = new Date(dateTime)\n	}\n\n	const timeSource = {\n		'y': date.getFullYear().toString(), // 年\n		'm': (date.getMonth() + 1).toString().padStart(2, '0'), // 月\n		'd': date.getDate().toString().padStart(2, '0'), // 日\n		'h': date.getHours().toString().padStart(2, '0'), // 时\n		'M': date.getMinutes().toString().padStart(2, '0'), // 分\n		's': date.getSeconds().toString().padStart(2, '0') // 秒\n		// 有其他格式化字符需求可以继续添加，必须转化成字符串\n	}\n\n  for (const key in timeSource) {\n    const [ret] = new RegExp(`${key}+`).exec(formatStr) || []\n    if (ret) {\n      // 年可能只需展示两位\n      const beginIndex = key === 'y' && ret.length === 2 ? 2 : 0\n      formatStr = formatStr.replace(ret, timeSource[key].slice(beginIndex))\n    }\n  }\n\n  return formatStr\n}\n"})}),"\n",(0,i.jsxs)(t.h2,{id:"多久以前",children:[(0,i.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#多久以前",children:"#"}),"多久以前"]}),"\n",(0,i.jsxs)(t.h3,{id:"uview-ui-timefrom",children:[(0,i.jsx)(t.a,{className:"header-anchor","aria-hidden":"true",href:"#uview-ui-timefrom",children:"#"}),"uview-ui timeFrom"]}),"\n",(0,i.jsx)(t.p,{children:"此函数依赖 uview-ui 的 timeFormat 函数。"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-js",meta:"",children:"/**\n * @description 时间戳转为多久之前\n * @param {String|Number} timestamp 时间戳\n * @param {String|Boolean} format\n * 格式化规则如果为时间格式字符串，超出一定时间范围，返回固定的时间格式；\n * 如果为布尔值false，无论什么时间，都返回多久以前的格式\n * @returns {string} 转化后的内容\n */\nfunction timeFrom(timestamp = null, format = 'yyyy-mm-dd') {\n	if (timestamp == null) timestamp = Number(new Date())\n	timestamp = parseInt(timestamp)\n	// 判断用户输入的时间戳是秒还是毫秒,一般前端js获取的时间戳是毫秒(13位),后端传过来的为秒(10位)\n	if (timestamp.toString().length == 10) timestamp *= 1000\n	let timer = (new Date()).getTime() - timestamp\n	timer = parseInt(timer / 1000)\n	// 如果小于5分钟,则返回\"刚刚\",其他以此类推\n	let tips = ''\n	switch (true) {\n		case timer < 300:\n			tips = '刚刚'\n			break\n		case timer >= 300 && timer < 3600:\n			tips = `${parseInt(timer / 60)}分钟前`\n			break\n		case timer >= 3600 && timer < 86400:\n			tips = `${parseInt(timer / 3600)}小时前`\n			break\n		case timer >= 86400 && timer < 2592000:\n			tips = `${parseInt(timer / 86400)}天前`\n			break\n		default:\n			// 如果format为false，则无论什么时间戳，都显示xx之前\n			if (format === false) {\n				if (timer >= 2592000 && timer < 365 * 86400) {\n					tips = `${parseInt(timer / (86400 * 30))}个月前`\n				} else {\n					tips = `${parseInt(timer / (86400 * 365))}年前`\n				}\n			} else {\n				tips = timeFormat(timestamp, format)\n			}\n	}\n	return tips\n}\n"})})]})}function m(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,r.ah)(),e.components);return t?(0,i.jsx)(t,Object.assign({},e,{children:(0,i.jsx)(a,e)})):a(e)}let s=m;m.__RSPRESS_PAGE_META={},m.__RSPRESS_PAGE_META["front-end%2Fcode-snippet%2F%E6%97%B6%E9%97%B4%E5%92%8C%E6%97%A5%E6%9C%9F.mdx"]={toc:[{id:"时间格式化",text:"时间格式化",depth:2},{id:"uview-ui-timeformat",text:"uview-ui timeFormat",depth:3},{id:"多久以前",text:"多久以前",depth:2},{id:"uview-ui-timefrom",text:"uview-ui timeFrom",depth:3}],title:"时间和日期",frontmatter:{}}}}]);