"use strict";(self.webpackChunkFrostWood=self.webpackChunkFrostWood||[]).push([["2774"],{434:function(e,n,l){l.r(n),l.d(n,{default:function(){return i}});var d=l(5893),h=l(65);function r(e){let n=Object.assign({h1:"h1",a:"a",p:"p",ul:"ul",li:"li",h2:"h2",code:"code",pre:"pre",h3:"h3",ol:"ol"},(0,h.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"html-语言和基础结构",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#html-语言和基础结构",children:"#"}),"HTML 语言和基础结构"]}),"\n",(0,d.jsx)(n.p,{children:"HTML（HyperText Markup Language），超文本标记语言，是用于创建网页的一种标记语言。"}),"\n",(0,d.jsx)(n.p,{children:"那什么是标记语言呢？"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"由若干个标记或者叫标签（tag），组成的语言，就叫做标记语言；"}),"\n",(0,d.jsx)(n.li,{children:"标签的作用就是对某些内容进行标记，让浏览器能够识别和解析（比如 h1 标签，浏览器就知道这是一个标题）；"}),"\n",(0,d.jsx)(n.li,{children:"标签和标签包裹的内容，共同组成的部分，叫做元素（element）。"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"那什么是超文本呢？超文本的意思就是超越文本，不仅仅只有文字，还可以有图片，视频，音频，链接等。"}),"\n",(0,d.jsxs)(n.h2,{id:"html-文件的后缀名",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#html-文件的后缀名",children:"#"}),"HTML 文件的后缀名"]}),"\n",(0,d.jsxs)(n.p,{children:["HTML 文件的后缀名是 ",(0,d.jsx)(n.code,{children:".html"})," 或者 ",(0,d.jsx)(n.code,{children:".htm"}),"。"]}),"\n",(0,d.jsxs)(n.p,{children:["为什么有两个呢？首先，现代前端开发统一使用 ",(0,d.jsx)(n.code,{children:".html"})," 作为文件后缀名，\n而 ",(0,d.jsx)(n.code,{children:".htm"})," 的存在，是由于早期的 Windows 操作系统，对文件的后缀名有长度限制，不能超过 3 个字符，所以才使用了 ",(0,d.jsx)(n.code,{children:".htm"})," 作为文件后缀名。"]}),"\n",(0,d.jsxs)(n.h2,{id:"html-的结构",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#html-的结构",children:"#"}),"HTML 的结构"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-html",meta:"",children:'<!DOCTYPE html>\n<html lang="zh-CN">\n  <head>\n    <title>Document</title>\n  </head>\n  <body>\n    <h1>Hello World</h1>\n  </body>\n</html>\n'})}),"\n",(0,d.jsx)(n.p,{children:"上面的代码，就是 HTML 文件的结构。主要包含以下几个部分："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"<!DOCTYPE html>"}),"：声明文档类型，告诉浏览器这是一个 HTML5 文档；"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"<html>"}),"：根元素，所有的 HTML 代码都包含在这个标签中；"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"<head>"}),"：头元素，包含文档的元数据，比如字符集，标题等；"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"<title>"}),"：标题元素，定义文档的标题；"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"<body>"}),"：主体元素，包含文档的主体内容，也就是我们看到的页面内容。"]}),"\n"]}),"\n",(0,d.jsxs)(n.h2,{id:"元素",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#元素",children:"#"}),"元素"]}),"\n",(0,d.jsx)(n.p,{children:"上面已经说了，元素（element）是由标签（tag）和内容（content）组成的，元素是网页的一部分。"}),"\n",(0,d.jsx)(n.p,{children:"一个元素，可以是一段文本，或者是一个图片，或者是一个空的标签。"}),"\n",(0,d.jsxs)(n.p,{children:["实际开发中，能使用到的元素，其实并不多，但是所有元素总共的数量，还是非常多的，\n具体可以参考：",(0,d.jsx)(n.a,{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element",rel:"noopener noreferrer",target:"_blank",children:"HTML 元素参考手册"}),"。"]}),"\n",(0,d.jsx)(n.p,{children:"这些元素不需要去记忆，常用的元素多用几次自己就记住了，那些不常用的元素。可以去上面的手册里面查找。"}),"\n",(0,d.jsxs)(n.h3,{id:"元素的构成",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#元素的构成",children:"#"}),"元素的构成"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-html",meta:"",children:"<h1>Hello World</h1>\n"})}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.code,{children:"<h1>"})," 是开始标签，",(0,d.jsx)(n.code,{children:"</h1>"})," 是结束标签，",(0,d.jsx)(n.code,{children:"Hello World"})," 是内容，他们三个一起，组成了一个元素。"]}),"\n",(0,d.jsxs)(n.h3,{id:"单标签元素和双标签元素",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#单标签元素和双标签元素",children:"#"}),"单标签元素和双标签元素"]}),"\n",(0,d.jsx)(n.p,{children:"双标签元素，就是既有开始标签，又有结束标签的元素。比如："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-html",meta:"",children:"<h1>Hello World</h1>\n<p>Hello World</p>\n<div>Hello World</div>\n<html></html>\n<body></body>\n"})}),"\n",(0,d.jsx)(n.p,{children:"双标签元素是因为它们元素的开始和结束标签之间需要放置内容。"}),"\n",(0,d.jsx)(n.p,{children:"单标签元素，就是只有开始标签，没有结束标签的元素。比如："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-html",meta:"",children:"<br>\n<hr>\n<img>\n<input>\n<link>\n<meta>\n"})}),"\n",(0,d.jsxs)(n.p,{children:["单标签元素是因为它们元素的开始和结束标签之间不需要放置内容。\n比如 ",(0,d.jsx)(n.code,{children:"<img>"})," 标签，它表示一张图片，但是图片是使用 ",(0,d.jsx)(n.code,{children:"src"})," 属性来设置的，而不是放在标签之间。"]}),"\n",(0,d.jsx)(n.p,{children:"单标签元素有 3 种写法："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-html",meta:"",children:"\x3c!-- 以 / 结尾 --\x3e\n<img/>\n\x3c!-- 以 / 结尾，/ 前面有空格 --\x3e\n<img />\n\x3c!-- 没有结束标签 --\x3e\n<img>\n"})}),"\n",(0,d.jsx)(n.p,{children:"前两种写法，是从旧时代（HTML4 和 XHTML）遗留下来的写法，现在不推荐使用。"}),"\n",(0,d.jsx)(n.p,{children:"第三种写法，是 HTML5 的写法，推荐使用。"}),"\n",(0,d.jsx)(n.p,{children:"元素可以是大写的，也可以是小写的，但是推荐使用小写，下面的代码，实际作用是一样的："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-html",meta:"",children:"<H1>Hello World</H1>\n<h1>Hello World</h1>\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"元素的属性",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#元素的属性",children:"#"}),"元素的属性"]}),"\n",(0,d.jsx)(n.p,{children:"大部分情况下，元素的属性，是用来设置额外信息的，不会出现在显示的内容中。"}),"\n",(0,d.jsx)(n.p,{children:"元素的属性需要遵循以下规则:"}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsx)(n.li,{children:"在元素名称和第一个属性之间必须有一个空格，多个属性之间也需要用空格分隔"}),"\n",(0,d.jsxs)(n.li,{children:["属性名称后如果需要设置值，则紧跟一个等号 ",(0,d.jsx)(n.code,{children:"="})]}),"\n",(0,d.jsxs)(n.li,{children:["属性值必须用双引号 ",(0,d.jsx)(n.code,{children:'"'})," 包裹"]}),"\n",(0,d.jsx)(n.li,{children:"属性是写在元素的开始标签中的"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"举个例子："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-html",meta:"",children:'<div id="text" class="text" style="color: red;">Hello World</div>\n'})}),"\n",(0,d.jsxs)(n.h3,{id:"元素属性的分类",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#元素属性的分类",children:"#"}),"元素属性的分类"]}),"\n",(0,d.jsx)(n.p,{children:"元素属性的分类呢，可以分为两类。"}),"\n",(0,d.jsxs)(n.p,{children:["第一类呢就是公共属性。它就表示每一个元素，它都支持这个属性。比如说 ",(0,d.jsx)(n.code,{children:"class"})," ",(0,d.jsx)(n.code,{children:"id"})," ",(0,d.jsx)(n.code,{children:"title"}),"。"]}),"\n",(0,d.jsxs)(n.p,{children:["另外一类属性呢，它叫做特有属性，只有特定的元素，才支持这个属性。比如说 ",(0,d.jsx)(n.code,{children:"meta"})," 标签的 ",(0,d.jsx)(n.code,{children:"charset"})," 属性。"]}),"\n",(0,d.jsxs)(n.h3,{id:"元素的嵌套",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#元素的嵌套",children:"#"}),"元素的嵌套"]}),"\n",(0,d.jsx)(n.p,{children:"某些元素的内容，除了可以包含文本，还可以包含其他元素。也就是元素可以嵌套。"}),"\n",(0,d.jsx)(n.p,{children:"比如："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-html",meta:"",children:"<div>\n  <h1>Hello World</h1>\n</div>\n"})}),"\n",(0,d.jsx)(n.p,{children:"元素之间的关系，有父子关系、兄弟关系。"}),"\n",(0,d.jsx)(n.p,{children:"父子关系："}),"\n",(0,d.jsxs)(n.p,{children:["下面的代码中，",(0,d.jsx)(n.code,{children:"<div>"})," 是父元素，",(0,d.jsx)(n.code,{children:"<h1>"})," 是子元素。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-html",meta:"",children:"<div>\n  <h1>Hello World</h1>\n</div>\n"})}),"\n",(0,d.jsx)(n.p,{children:"兄弟关系："}),"\n",(0,d.jsxs)(n.p,{children:["下面的代码中，",(0,d.jsx)(n.code,{children:"<div>"})," 和 ",(0,d.jsx)(n.code,{children:"<div>"})," 是兄弟元素。"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-html",meta:"",children:"<div>\n  <h1>Hello World</h1>\n</div>\n<div>\n  <h1>Hello World</h1>\n</div>\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"html中的注释",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#html中的注释",children:"#"}),"HTML中的注释"]}),"\n",(0,d.jsx)(n.p,{children:"注释的作用是，在代码中添加一些解释性的文字，方便开发者阅读和理解代码。"}),"\n",(0,d.jsx)(n.p,{children:"浏览器会解析注释，但是不会显示在页面上。"}),"\n",(0,d.jsx)(n.p,{children:"注释的写法是："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-html",meta:"",children:"\x3c!-- 单行注释 --\x3e\n\n\x3c!-- \n  多行注释\n  多行注释\n  多行注释\n--\x3e\n"})}),"\n",(0,d.jsx)(n.p,{children:"注释的作用主要有："}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsx)(n.li,{children:"记录自己的实现思路，方便以后阅读和理解代码；"}),"\n",(0,d.jsx)(n.li,{children:"帮助别人理解代码，减少沟通成本；"}),"\n",(0,d.jsx)(n.li,{children:"开源项目中，帮助别人理解代码；"}),"\n",(0,d.jsx)(n.li,{children:"用于代码的调试；"}),"\n"]})]})}function s(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,h.ah)(),e.components);return n?(0,d.jsx)(n,Object.assign({},e,{children:(0,d.jsx)(r,e)})):r(e)}let i=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["front-end%2Fhtml%2FHTML%E8%AF%AD%E8%A8%80%E5%92%8C%E5%9F%BA%E7%A1%80%E7%BB%93%E6%9E%84.mdx"]={toc:[{id:"html-文件的后缀名",text:"HTML 文件的后缀名",depth:2},{id:"html-的结构",text:"HTML 的结构",depth:2},{id:"元素",text:"元素",depth:2},{id:"元素的构成",text:"元素的构成",depth:3},{id:"单标签元素和双标签元素",text:"单标签元素和双标签元素",depth:3},{id:"元素的属性",text:"元素的属性",depth:3},{id:"元素属性的分类",text:"元素属性的分类",depth:3},{id:"元素的嵌套",text:"元素的嵌套",depth:3},{id:"html中的注释",text:"HTML中的注释",depth:2}],title:"HTML 语言和基础结构",frontmatter:{}}}}]);